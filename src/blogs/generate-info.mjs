import * as fs from "fs";
import graymatter from "gray-matter";
import * as path from "path";
(async () => {
    const cwd = process.cwd();
    let imageCnt = 0;
    let imageImport = "";
    let blogData = `export const blogData: {
    [key: string]: {
        title: string;
        date: string;
        author: string;
        topic: string;
        thumbnail: StaticImageData;
        images: {
            [key: string]: StaticImageData;
        };
        description: string;
        content: string;
    };
} = {\n`;
    for (const round of await fs.promises.readdir(path.join(cwd, "src/blogs"))) {
        if (!fs.statSync(path.join(cwd, "src/blogs", round)).isDirectory() || !Number.isInteger(Number(round)))
            continue;
        const folderPath = path.join(cwd, "src/blogs", round);
        for (const index of await fs.promises.readdir(folderPath)) {
            if (!fs.statSync(path.join(folderPath, index)).isDirectory()) {
                console.log(`WARNING: ${path.join(folderPath, index)} is not a directory`);
                continue;
            }
            let thumbnail = undefined;
            const images = [];
            for (const file of await fs.promises.readdir(path.join(folderPath, index))) {
                if (
                    !(
                        file.endsWith(".png") ||
                        file.endsWith(".jpg") ||
                        file.endsWith(".jpeg") ||
                        file.endsWith(".webp") ||
                        file.endsWith(".avif") ||
                        file.endsWith(".avifs")
                    )
                )
                    continue;
                imageImport += `import Image${imageCnt} from "./${round}/${index}/${file}";\n`;
                if (file.split(".")[0] === "thumbnail") {
                    if (thumbnail !== undefined) {
                        console.log(`WARNING: ${path.join(folderPath, index)} has multiple thumbnail images`);
                    }
                    thumbnail = [file, imageCnt];
                } else {
                    images.push([file, imageCnt]);
                }
                imageCnt += 1;
            }
            if (thumbnail === undefined) {
                console.log(`WARNING: ${path.join(folderPath, index)} does not have a thumbnail image`);
            }
            const filestr = await fs.promises.readFile(path.join(folderPath, index, "index.md"), "utf-8");
            let { data, content } = graymatter(filestr);
            content = content.replaceAll("\r\n", "\n").replaceAll("\r", "\n").replaceAll("%20", " ");
            if (!content.includes("\n# 目次\n")) {
                console.log(`WARNING: ${path.join(folderPath, index)} does not have a table of contents`);
                continue;
            }
            const [description, main_text] = content.split("\n# 目次\n");
            blogData += `    "${round}/${index}": {
        title: \`${data.title}\`,
        date: \`${data.date}\`,
        author: \`${data.author}\`,
        topic: \`${data.topic}\`,
        thumbnail: ${thumbnail !== undefined ? `Image${thumbnail[1]}` : "undefined"},
        images: {${images.map((image) => `\n            "${image[0]}": Image${image[1]},`).join("")}\n        },
        description: \`${description}\`,
        content: \`${main_text}\`,
    },
`;
        }
    }
    blogData += "};\n";
    const result =
        `// ===================================================================================\n` +
        `// This file is auto-generated by generate-info.mjs. Do not edit this file directly.\n` +
        `// ===================================================================================\n\n` +
        `import type { StaticImageData } from "next/image";\n` +
        imageImport +
        blogData;
    fs.writeFileSync(path.join(cwd, "src/blogs", "blog-info.ts"), result, "utf-8");
})();
