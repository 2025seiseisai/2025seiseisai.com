# -*- coding: utf-8 -*-
import glob
import os
import shutil

import frontmatter

os.chdir(os.path.dirname(__file__))

with open("blog-info.ts", "w", encoding="utf-8") as f:
    f.write("// This file is generated by generate-info.py. Do not edit this file directly. */\n")
    f.write("import type { StaticImageData } from 'next/image';\n")
    paths = glob.glob("./**/*.png", recursive=True)
    paths = [path.replace("\\", "/") for path in paths]
    paths.sort()
    for i, path in enumerate(paths):
        f.write(f'import Image{i} from "{path}";\n')
    f.write("export const blogImages: { [key: string]: StaticImageData } = {\n")
    for i, path in enumerate(paths):
        f.write(f'    "{path[2:]}": Image{i},\n')
    f.write("};\n")
    f.write("export const blogPaths: string[] = [\n")
    blogs = []
    for rd in os.listdir("./"):
        if not os.path.isdir(rd):
            continue
        for idx in os.listdir("./" + rd):
            blogs.append((rd, idx))
            f.write(f'    "{rd}/{idx}",\n')
    f.write("];\n")
    f.write('''export const blogMetadata: {
    [key: string]: {
        title: string;
        date: string;
        author: string;
        topic: string;
        thumbnail: StaticImageData;
        description: string;
        content: string;
    };
} = {
''')
    for rd, idx in blogs:
        metadata = {}
        with open(f"./{rd}/{idx}/index.md", 'r', encoding='utf-8') as f2:
            metadata = frontmatter.load(f2)
        if "\n# 目次\n" not in metadata.content:
            print(f"Error: {rd}/{idx} does not have a table of contents.")
            continue
        content = metadata.content.split("\n# 目次\n")
        f.write(f'    "{rd}/{idx}":' +  ' {\n')
        f.write(f'        title: `{metadata["title"]}`,\n')
        f.write(f'        date: `{metadata["date"]}`,\n')
        f.write(f'        author: `{metadata["author"]}`,\n')
        f.write(f'        topic: `{metadata["topic"]}`,\n')
        f.write(f'        thumbnail: blogImages["{rd}/{idx}/thumbnail.png"],\n')
        f.write(f'        description: `{content[0]}{'' if content[0].endswith("\n") else '\n'}`,\n')
        f.write(f'        content: `{content[1]}{'' if content[1].endswith("\n") else '\n'}`,\n')
        f.write("    },\n")
    f.write("};\n")
if os.path.exists("../../public/blog-resources"):
    shutil.rmtree("../../public/blog-resources")
for path in glob.glob("./**/*", recursive=True):
    if not os.path.isfile(path) or path.endswith(".png") or path.endswith(".md") or path.endswith(".ts") or path.endswith(".tsx") or path.endswith(".py"):
        continue
    dst = os.path.join("../../public/blog-resources", path)
    os.makedirs(os.path.dirname(dst), exist_ok=True)
    shutil.copy(path, dst)
